"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@contentful";
exports.ids = ["vendor-chunks/@contentful"];
exports.modules = {

/***/ "(rsc)/./node_modules/@contentful/content-source-maps/dist/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@contentful/content-source-maps/dist/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SUPPORTED_WIDGETS: () => (/* binding */ ce),\n/* harmony export */   clone: () => (/* binding */ Q),\n/* harmony export */   combine: () => (/* binding */ w),\n/* harmony export */   createSourceMapMetadata: () => (/* binding */ C),\n/* harmony export */   decode: () => (/* binding */ ae),\n/* harmony export */   encode: () => (/* binding */ ie),\n/* harmony export */   encodeCPAResponse: () => (/* binding */ le),\n/* harmony export */   encodeField: () => (/* binding */ P),\n/* harmony export */   encodeGraphQLResponse: () => (/* binding */ fe),\n/* harmony export */   encodeRichTextValue: () => (/* binding */ oe),\n/* harmony export */   isBuiltinNamespace: () => (/* binding */ B),\n/* harmony export */   isSupportedWidget: () => (/* binding */ D),\n/* harmony export */   splitEncoding: () => (/* binding */ ue)\n/* harmony export */ });\nvar W = { 0: 8203, 1: 8204, 2: 8205, 3: 8290, 4: 8291, 5: 8288, 6: 65279, 7: 8289, 8: 119155, 9: 119156, a: 119157, b: 119158, c: 119159, d: 119160, e: 119161, f: 119162 }, L = { 0: 8203, 1: 8204, 2: 8205, 3: 65279 }, j = new Array(4).fill(String.fromCodePoint(L[0])).join(\"\"), V = \"\\0\";\nfunction U(t) {\n  let n = JSON.stringify(t);\n  return `${j}${Array.from(n).map((o) => {\n    let e = o.charCodeAt(0);\n    if (e > 255) throw new Error(`Only ASCII edit info can be encoded. Error attempting to encode ${n} on character ${o} (${e})`);\n    return Array.from(e.toString(4).padStart(4, \"0\")).map((r) => String.fromCodePoint(L[r])).join(\"\");\n  }).join(\"\")}`;\n}\nfunction Z(t) {\n  return !Number.isNaN(Number(t)) || /[a-z]/i.test(t) && !/\\d+(?:[-:\\/]\\d+){2}(?:T\\d+(?:[-:\\/]\\d+){1,2}(\\.\\d+)?Z?)?/.test(t) ? !1 : !!Date.parse(t);\n}\nfunction q(t) {\n  try {\n    new URL(t, t.startsWith(\"/\") ? \"https://acme.com\" : void 0);\n  } catch (n) {\n    return !1;\n  }\n  return !0;\n}\nfunction G(t, n, o = \"auto\") {\n  return o === !0 || o === \"auto\" && (Z(t) || q(t)) ? t : `${t}${U(n)}`;\n}\nvar H = Object.fromEntries(Object.entries(L).map((t) => t.reverse())), F = Object.fromEntries(Object.entries(W).map((t) => t.reverse())), K = `${Object.values(W).map((t) => `\\\\u{${t.toString(16)}}`).join(\"\")}`, O = new RegExp(`[${K}]{4,}`, \"gu\");\nfunction X(t) {\n  let n = t.match(O);\n  if (n) return Y(n[0], !0)[0];\n}\nfunction Y(t, n = !1) {\n  let o = Array.from(t);\n  if (o.length % 2 === 0) {\n    if (o.length % 4 || !t.startsWith(j)) return ee(o, n);\n  } else throw new Error(\"Encoded data has invalid length\");\n  let e = [];\n  for (let r = o.length * 0.25; r--; ) {\n    let s = o.slice(r * 4, r * 4 + 4).map((c) => H[c.codePointAt(0)]).join(\"\");\n    e.unshift(String.fromCharCode(parseInt(s, 4)));\n  }\n  if (n) {\n    e.shift();\n    let r = e.indexOf(V);\n    return r === -1 && (r = e.length), [JSON.parse(e.slice(0, r).join(\"\"))];\n  }\n  return e.join(\"\").split(V).filter(Boolean).map((r) => JSON.parse(r));\n}\nfunction ee(t, n) {\n  var o;\n  let e = [];\n  for (let i = t.length * 0.5; i--; ) {\n    let u = `${F[t[i * 2].codePointAt(0)]}${F[t[i * 2 + 1].codePointAt(0)]}`;\n    e.unshift(String.fromCharCode(parseInt(u, 16)));\n  }\n  let r = [], s = [e.join(\"\")], c = 10;\n  for (; s.length; ) {\n    let i = s.shift();\n    try {\n      if (r.push(JSON.parse(i)), n) return r;\n    } catch (u) {\n      if (!c--) throw u;\n      let a = +((o = u.message.match(/\\sposition\\s(\\d+)$/)) == null ? void 0 : o[1]);\n      if (!a) throw u;\n      s.unshift(i.substring(0, a), i.substring(a));\n    }\n  }\n  return r;\n}\nfunction te(t) {\n  var n;\n  return { cleaned: t.replace(O, \"\"), encoded: ((n = t.match(O)) == null ? void 0 : n[0]) || \"\" };\n}\nfunction w(t, n) {\n  return G(t, n);\n}\nfunction ie(t) {\n  return U(t);\n}\nfunction ae(t) {\n  return X(t);\n}\nfunction ue(t) {\n  return te(t);\n}\nvar x, k;\nfunction ne() {\n  if (k) return x;\n  k = 1;\n  var t = Object.prototype.hasOwnProperty, n = Object.prototype.toString;\n  return x = function(e, r, s) {\n    if (n.call(r) !== \"[object Function]\")\n      throw new TypeError(\"iterator must be a function\");\n    var c = e.length;\n    if (c === +c)\n      for (var i = 0; i < c; i++)\n        r.call(s, e[i], i, e);\n    else\n      for (var u in e)\n        t.call(e, u) && r.call(s, e[u], u, e);\n  }, x;\n}\nvar I, _;\nfunction re() {\n  if (_) return I;\n  _ = 1;\n  var t = ne();\n  I = n;\n  function n(o, e, r) {\n    if (arguments.length === 3)\n      return n.set(o, e, r);\n    if (arguments.length === 2)\n      return n.get(o, e);\n    var s = n.bind(n, o);\n    for (var c in n)\n      n.hasOwnProperty(c) && (s[c] = n[c].bind(s, o));\n    return s;\n  }\n  return n.get = function(e, r) {\n    for (var s = Array.isArray(r) ? r : n.parse(r), c = 0; c < s.length; ++c) {\n      var i = s[c];\n      if (!(typeof e == \"object\" && i in e))\n        throw new Error(\"Invalid reference token: \" + i);\n      e = e[i];\n    }\n    return e;\n  }, n.set = function(e, r, s) {\n    var c = Array.isArray(r) ? r : n.parse(r), i = c[0];\n    if (c.length === 0)\n      throw Error(\"Can not set the root object\");\n    for (var u = 0; u < c.length - 1; ++u) {\n      var a = c[u];\n      typeof a != \"string\" && typeof a != \"number\" && (a = String(a)), !(a === \"__proto__\" || a === \"constructor\" || a === \"prototype\") && (a === \"-\" && Array.isArray(e) && (a = e.length), i = c[u + 1], a in e || (i.match(/^(\\d+|-)$/) ? e[a] = [] : e[a] = {}), e = e[a]);\n    }\n    return i === \"-\" && Array.isArray(e) && (i = e.length), e[i] = s, this;\n  }, n.remove = function(o, e) {\n    var r = Array.isArray(e) ? e : n.parse(e), s = r[r.length - 1];\n    if (s === void 0)\n      throw new Error('Invalid JSON pointer for remove: \"' + e + '\"');\n    var c = n.get(o, r.slice(0, -1));\n    if (Array.isArray(c)) {\n      var i = +s;\n      if (s === \"\" && isNaN(i))\n        throw new Error('Invalid array index: \"' + s + '\"');\n      Array.prototype.splice.call(c, i, 1);\n    } else\n      delete c[s];\n  }, n.dict = function(e, r) {\n    var s = {};\n    return n.walk(e, function(c, i) {\n      s[i] = c;\n    }, r), s;\n  }, n.walk = function(e, r, s) {\n    var c = [];\n    s = s || function(i) {\n      var u = Object.prototype.toString.call(i);\n      return u === \"[object Object]\" || u === \"[object Array]\";\n    }, function i(u) {\n      t(u, function(a, l) {\n        c.push(String(l)), s(a) ? i(a) : r(a, n.compile(c)), c.pop();\n      });\n    }(e);\n  }, n.has = function(e, r) {\n    try {\n      n.get(e, r);\n    } catch (s) {\n      return !1;\n    }\n    return !0;\n  }, n.escape = function(e) {\n    return e.toString().replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\n  }, n.unescape = function(e) {\n    return e.replace(/~1/g, \"/\").replace(/~0/g, \"~\");\n  }, n.parse = function(e) {\n    if (e === \"\")\n      return [];\n    if (e.charAt(0) !== \"/\")\n      throw new Error(\"Invalid JSON pointer: \" + e);\n    return e.substring(1).split(/\\//).map(n.unescape);\n  }, n.compile = function(e) {\n    return e.length === 0 ? \"\" : \"/\" + e.map(n.escape).join(\"/\");\n  }, I;\n}\nvar p = re();\nconst oe = ({\n  pointer: t,\n  mappings: n,\n  data: o,\n  hiddenStrings: e\n}) => {\n  const r = n[t];\n  if (r) {\n    delete n[t];\n    const s = b(o, t);\n    for (const c of s) {\n      n[c] = r;\n      const i = p.get(o, c), u = w(i, e);\n      p.set(o, c, u);\n    }\n  } else {\n    const s = b(o, t);\n    for (const c of s) {\n      const i = p.get(o, c), u = w(i, e);\n      p.set(o, c, u);\n    }\n  }\n};\nfunction se(t) {\n  return \"content\" in t && !!t.content;\n}\nconst b = (t, n = \"\") => {\n  const o = [], e = p.get(t, n);\n  if (se(e))\n    for (let r = 0; r < e.content.length; r++)\n      e.content[r].nodeType === \"text\" ? o.push(`${n}/content/${r}/value`) : o.push(...b(t, `${n}/content/${r}`));\n  return o;\n}, C = ({\n  entityId: t,\n  entityType: n,\n  space: o,\n  environment: e,\n  field: r,\n  locale: s,\n  editorInterface: c,\n  fieldType: i,\n  targetOrigin: u,\n  platform: a\n}) => {\n  const d = {\n    origin: \"contentful.com\",\n    href: `${`${u || \"https://app.contentful.com\"}/spaces/${o}/environments/${e}`}/${n === \"Entry\" ? \"entries\" : \"assets\"}/${t}/?focusedField=${r}&focusedLocale=${s}&source=vercel-content-link`,\n    contentful: {\n      editorInterface: c,\n      fieldType: i\n    }\n  };\n  return a === \"vercel\" && delete d.contentful, d;\n}, B = (t) => [\"builtin\", \"sidebar-builtin\", \"editor-builtin\"].includes(t), D = (t) => ce.includes(t);\nfunction Q(t) {\n  if (typeof structuredClone == \"function\")\n    return structuredClone(t);\n  try {\n    return JSON.parse(JSON.stringify(t));\n  } catch (n) {\n    return console.warn(\"Failed to clone data:\", t, n), t;\n  }\n}\nconst ce = [\n  \"singleLine\",\n  \"tagEditor\",\n  \"listInput\",\n  \"checkbox\",\n  \"richTextEditor\",\n  \"multipleLine\"\n];\nfunction P(t, n, o, e, r, s, c) {\n  const i = c ? n[c] : n;\n  switch (t) {\n    case \"Symbol\": {\n      const u = w(i, o);\n      p.set(e, r, u);\n      break;\n    }\n    case \"Text\": {\n      const u = w(i, o);\n      p.set(e, r, u);\n      break;\n    }\n    case \"RichText\": {\n      oe({\n        pointer: \"\",\n        mappings: s,\n        data: i,\n        hiddenStrings: o\n      });\n      break;\n    }\n    case \"Array\": {\n      const u = i.map((a) => typeof a == \"string\" ? w(a, o) : a);\n      p.set(e, r, u);\n      break;\n    }\n  }\n}\nconst fe = (t, n, o) => {\n  if (!t || !t.extensions || !t.extensions.contentSourceMaps)\n    return console.error(\n      \"GraphQL response does not contain Content Source Maps information.\",\n      t\n    ), t;\n  const e = Q(t), {\n    spaces: r,\n    environments: s,\n    editorInterfaces: c,\n    fields: i,\n    locales: u,\n    entries: a,\n    assets: l,\n    mappings: m,\n    fieldTypes: v\n  } = e.extensions.contentSourceMaps, y = e;\n  for (const d in m) {\n    const { source: f } = m[d], h = \"entry\" in f ? a[f.entry] : l[f.asset], M = \"entry\" in f ? \"Entry\" : \"Asset\";\n    if (!h)\n      return e;\n    const g = r[h.space], A = s[h.environment], E = h.id, S = i[f.field], T = u[f.locale], N = c[f.editorInterface], J = v[f.fieldType];\n    if (!(B(N.widgetNamespace) && !D(N.widgetId)) && p.has(y, d)) {\n      const R = p.get(y, d);\n      if (R !== null) {\n        const z = C({\n          entityId: E,\n          entityType: M,\n          space: g,\n          environment: A,\n          field: S,\n          locale: T,\n          editorInterface: N,\n          fieldType: J,\n          targetOrigin: n,\n          platform: o\n        });\n        P(J, R, z, y, d, m);\n      }\n    }\n  }\n  return e;\n}, $ = (t, n, o, e, r) => {\n  if (!t.fields)\n    return;\n  const { contentSourceMaps: s } = t.sys;\n  if (!s)\n    return;\n  const { mappings: c } = s;\n  for (const i in c) {\n    const { source: u } = c[i], a = t.sys.space.sys.id, l = t.sys.environment.sys.id, m = t.sys.id, v = t.sys.type, y = n[u.fieldType], d = o[u.editorInterface];\n    if (B(d.widgetNamespace) && !D(d.widgetId))\n      continue;\n    const f = i.startsWith(\"/\") ? i : `/${i}`;\n    if (p.has(t, f)) {\n      const h = p.get(t, f);\n      if (h === null)\n        return;\n      const g = f.split(\"/\").pop();\n      if (!g) {\n        console.error(\"Field name could not be extracted from the pointer\", f);\n        return;\n      }\n      const A = t.sys.locale;\n      if (A) {\n        const E = C({\n          entityId: m,\n          entityType: v,\n          space: a,\n          environment: l,\n          field: g,\n          locale: A,\n          editorInterface: d,\n          fieldType: y,\n          targetOrigin: e,\n          platform: r\n        });\n        P(y, h, E, t, f, c);\n      } else\n        Object.keys(h).forEach((S) => {\n          const T = C({\n            entityId: m,\n            entityType: v,\n            space: a,\n            environment: l,\n            field: g,\n            locale: S,\n            editorInterface: d,\n            fieldType: y,\n            targetOrigin: e,\n            platform: r\n          });\n          P(\n            y,\n            h,\n            T,\n            t,\n            `${f}/${S}`,\n            c,\n            S\n          );\n        });\n    }\n  }\n}, le = (t, n, o) => {\n  var r;\n  const e = Q(\n    t\n  );\n  if (e.sys && \"items\" in e) {\n    const s = e;\n    if (!((r = s.sys) != null && r.contentSourceMapsLookup))\n      return s;\n    const {\n      contentSourceMapsLookup: { fieldTypes: c, editorInterfaces: i }\n    } = s.sys, { items: u, includes: a } = s;\n    u.forEach(\n      (l) => $(l, c, i, n, o)\n    ), a && a.Entry && a.Entry.forEach(\n      (l) => $(l, c, i, n, o)\n    ), a && a.Asset && a.Asset.forEach(\n      (l) => $(l, c, i, n, o)\n    );\n  } else {\n    const s = e;\n    if (!s.sys.contentSourceMapsLookup)\n      return console.error(\"Content source maps lookup data is missing\"), s;\n    $(\n      s,\n      s.sys.contentSourceMapsLookup.fieldTypes,\n      s.sys.contentSourceMapsLookup.editorInterfaces,\n      n,\n      o\n    );\n  }\n  return e;\n};\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@contentful/content-source-maps/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@contentful/rich-text-react-renderer/dist/rich-text-react-renderer.es5.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@contentful/rich-text-react-renderer/dist/rich-text-react-renderer.es5.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar React = __webpack_require__(/*! react */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react.js\");\nvar richTextTypes = __webpack_require__(/*! @contentful/rich-text-types */ \"(rsc)/./node_modules/@contentful/rich-text-types/dist/index.js\");\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nfunction appendKeyToValidElement(element, key) {\n    if (React.isValidElement(element) && element.key === null) {\n        return React.cloneElement(element, { key: key });\n    }\n    return element;\n}\n\nfunction nodeListToReactComponents(nodes, options) {\n    return nodes.map(function (node, index) {\n        return appendKeyToValidElement(nodeToReactComponent(node, options), index);\n    });\n}\nfunction nodeToReactComponent(node, options) {\n    var renderNode = options.renderNode, renderMark = options.renderMark, renderText = options.renderText, preserveWhitespace = options.preserveWhitespace;\n    if (richTextTypes.helpers.isText(node)) {\n        var nodeValue = renderText ? renderText(node.value) : node.value;\n        // Preserving whitespace is only supported with the default transformations.\n        if (preserveWhitespace && !renderText) {\n            // Preserve multiple spaces.\n            nodeValue = nodeValue.replace(/ {2,}/g, function (match) { return '\\u00A0'.repeat(match.length); });\n            // Preserve line breaks.\n            var lines_1 = nodeValue.split('\\n');\n            var jsxLines_1 = [];\n            lines_1.forEach(function (line, index) {\n                jsxLines_1.push(line);\n                if (index !== lines_1.length - 1) {\n                    jsxLines_1.push(React.createElement(\"br\", null));\n                }\n            });\n            nodeValue = jsxLines_1;\n        }\n        return node.marks.reduce(function (value, mark) {\n            if (!renderMark[mark.type]) {\n                return value;\n            }\n            return renderMark[mark.type](value);\n        }, nodeValue);\n    }\n    else {\n        var children = nodeListToReactComponents(node.content, options);\n        if (!node.nodeType || !renderNode[node.nodeType]) {\n            return React.createElement(React.Fragment, null, children);\n        }\n        return renderNode[node.nodeType](node, children);\n    }\n}\n\nvar _a, _b;\nvar defaultNodeRenderers = (_a = {},\n    _a[richTextTypes.BLOCKS.DOCUMENT] = function (node, children) { return children; },\n    _a[richTextTypes.BLOCKS.PARAGRAPH] = function (node, children) { return React.createElement(\"p\", null, children); },\n    _a[richTextTypes.BLOCKS.HEADING_1] = function (node, children) { return React.createElement(\"h1\", null, children); },\n    _a[richTextTypes.BLOCKS.HEADING_2] = function (node, children) { return React.createElement(\"h2\", null, children); },\n    _a[richTextTypes.BLOCKS.HEADING_3] = function (node, children) { return React.createElement(\"h3\", null, children); },\n    _a[richTextTypes.BLOCKS.HEADING_4] = function (node, children) { return React.createElement(\"h4\", null, children); },\n    _a[richTextTypes.BLOCKS.HEADING_5] = function (node, children) { return React.createElement(\"h5\", null, children); },\n    _a[richTextTypes.BLOCKS.HEADING_6] = function (node, children) { return React.createElement(\"h6\", null, children); },\n    _a[richTextTypes.BLOCKS.EMBEDDED_ENTRY] = function (node, children) { return React.createElement(\"div\", null, children); },\n    _a[richTextTypes.BLOCKS.EMBEDDED_RESOURCE] = function (node, children) { return React.createElement(\"div\", null, children); },\n    _a[richTextTypes.BLOCKS.UL_LIST] = function (node, children) { return React.createElement(\"ul\", null, children); },\n    _a[richTextTypes.BLOCKS.OL_LIST] = function (node, children) { return React.createElement(\"ol\", null, children); },\n    _a[richTextTypes.BLOCKS.LIST_ITEM] = function (node, children) { return React.createElement(\"li\", null, children); },\n    _a[richTextTypes.BLOCKS.QUOTE] = function (node, children) { return React.createElement(\"blockquote\", null, children); },\n    _a[richTextTypes.BLOCKS.HR] = function () { return React.createElement(\"hr\", null); },\n    _a[richTextTypes.BLOCKS.TABLE] = function (node, children) { return (React.createElement(\"table\", null,\n        React.createElement(\"tbody\", null, children))); },\n    _a[richTextTypes.BLOCKS.TABLE_ROW] = function (node, children) { return React.createElement(\"tr\", null, children); },\n    _a[richTextTypes.BLOCKS.TABLE_HEADER_CELL] = function (node, children) { return React.createElement(\"th\", null, children); },\n    _a[richTextTypes.BLOCKS.TABLE_CELL] = function (node, children) { return React.createElement(\"td\", null, children); },\n    _a[richTextTypes.INLINES.ASSET_HYPERLINK] = function (node) { return defaultInline(richTextTypes.INLINES.ASSET_HYPERLINK, node); },\n    _a[richTextTypes.INLINES.ENTRY_HYPERLINK] = function (node) { return defaultInline(richTextTypes.INLINES.ENTRY_HYPERLINK, node); },\n    _a[richTextTypes.INLINES.RESOURCE_HYPERLINK] = function (node) {\n        return defaultInlineResource(richTextTypes.INLINES.RESOURCE_HYPERLINK, node);\n    },\n    _a[richTextTypes.INLINES.EMBEDDED_ENTRY] = function (node) { return defaultInline(richTextTypes.INLINES.EMBEDDED_ENTRY, node); },\n    _a[richTextTypes.INLINES.EMBEDDED_RESOURCE] = function (node, _children) {\n        return defaultInlineResource(richTextTypes.INLINES.EMBEDDED_RESOURCE, node);\n    },\n    _a[richTextTypes.INLINES.HYPERLINK] = function (node, children) { return React.createElement(\"a\", { href: node.data.uri }, children); },\n    _a);\nvar defaultMarkRenderers = (_b = {},\n    _b[richTextTypes.MARKS.BOLD] = function (text) { return React.createElement(\"b\", null, text); },\n    _b[richTextTypes.MARKS.ITALIC] = function (text) { return React.createElement(\"i\", null, text); },\n    _b[richTextTypes.MARKS.UNDERLINE] = function (text) { return React.createElement(\"u\", null, text); },\n    _b[richTextTypes.MARKS.CODE] = function (text) { return React.createElement(\"code\", null, text); },\n    _b[richTextTypes.MARKS.SUPERSCRIPT] = function (text) { return React.createElement(\"sup\", null, text); },\n    _b[richTextTypes.MARKS.SUBSCRIPT] = function (text) { return React.createElement(\"sub\", null, text); },\n    _b[richTextTypes.MARKS.STRIKETHROUGH] = function (text) { return React.createElement(\"s\", null, text); },\n    _b);\nfunction defaultInline(type, node) {\n    return (React.createElement(\"span\", { key: node.data.target.sys.id },\n        \"type: \",\n        node.nodeType,\n        \" id: \",\n        node.data.target.sys.id));\n}\nfunction defaultInlineResource(type, node) {\n    return (React.createElement(\"span\", { key: node.data.target.sys.urn },\n        \"type: \",\n        node.nodeType,\n        \" urn: \",\n        node.data.target.sys.urn));\n}\n/**\n * Serialize a Contentful Rich Text `document` to React tree\n */\nfunction documentToReactComponents(richTextDocument, options) {\n    if (options === void 0) { options = {}; }\n    if (!richTextDocument) {\n        return null;\n    }\n    // Strip empty trailing paragraph if enabled\n    var processedDocument = richTextDocument;\n    if (options.stripEmptyTrailingParagraph) {\n        processedDocument = richTextTypes.helpers.stripEmptyTrailingParagraphFromDocument(richTextDocument);\n    }\n    return nodeToReactComponent(processedDocument, {\n        renderNode: __assign(__assign({}, defaultNodeRenderers), options.renderNode),\n        renderMark: __assign(__assign({}, defaultMarkRenderers), options.renderMark),\n        renderText: options.renderText,\n        preserveWhitespace: options.preserveWhitespace,\n    });\n}\n\nexports.documentToReactComponents = documentToReactComponents;\n//# sourceMappingURL=rich-text-react-renderer.es5.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@contentful/rich-text-react-renderer/dist/rich-text-react-renderer.es5.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@contentful/rich-text-types/dist/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@contentful/rich-text-types/dist/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar isPlainObject = __webpack_require__(/*! is-plain-obj */ \"(rsc)/./node_modules/@contentful/rich-text-types/node_modules/is-plain-obj/index.js\");\n\n/**\n * Map of all Contentful block types. Blocks contain inline or block nodes.\n */\nexports.BLOCKS = void 0;\n(function (BLOCKS) {\n    BLOCKS[\"DOCUMENT\"] = \"document\";\n    BLOCKS[\"PARAGRAPH\"] = \"paragraph\";\n    BLOCKS[\"HEADING_1\"] = \"heading-1\";\n    BLOCKS[\"HEADING_2\"] = \"heading-2\";\n    BLOCKS[\"HEADING_3\"] = \"heading-3\";\n    BLOCKS[\"HEADING_4\"] = \"heading-4\";\n    BLOCKS[\"HEADING_5\"] = \"heading-5\";\n    BLOCKS[\"HEADING_6\"] = \"heading-6\";\n    BLOCKS[\"OL_LIST\"] = \"ordered-list\";\n    BLOCKS[\"UL_LIST\"] = \"unordered-list\";\n    BLOCKS[\"LIST_ITEM\"] = \"list-item\";\n    BLOCKS[\"HR\"] = \"hr\";\n    BLOCKS[\"QUOTE\"] = \"blockquote\";\n    BLOCKS[\"EMBEDDED_ENTRY\"] = \"embedded-entry-block\";\n    BLOCKS[\"EMBEDDED_ASSET\"] = \"embedded-asset-block\";\n    BLOCKS[\"EMBEDDED_RESOURCE\"] = \"embedded-resource-block\";\n    BLOCKS[\"TABLE\"] = \"table\";\n    BLOCKS[\"TABLE_ROW\"] = \"table-row\";\n    BLOCKS[\"TABLE_CELL\"] = \"table-cell\";\n    BLOCKS[\"TABLE_HEADER_CELL\"] = \"table-header-cell\";\n})(exports.BLOCKS || (exports.BLOCKS = {}));\n\n/**\n * Map of all Contentful inline types. Inline contain inline or text nodes.\n *\n * @note This should be kept in alphabetical order since the\n * [validation package](https://github.com/contentful/content-stack/tree/master/packages/validation)\n *  relies on the values being in a predictable order.\n */\nexports.INLINES = void 0;\n(function (INLINES) {\n    INLINES[\"ASSET_HYPERLINK\"] = \"asset-hyperlink\";\n    INLINES[\"EMBEDDED_ENTRY\"] = \"embedded-entry-inline\";\n    INLINES[\"EMBEDDED_RESOURCE\"] = \"embedded-resource-inline\";\n    INLINES[\"ENTRY_HYPERLINK\"] = \"entry-hyperlink\";\n    INLINES[\"HYPERLINK\"] = \"hyperlink\";\n    INLINES[\"RESOURCE_HYPERLINK\"] = \"resource-hyperlink\";\n})(exports.INLINES || (exports.INLINES = {}));\n\n/**\n * Map of all Contentful marks.\n */\nexports.MARKS = void 0;\n(function (MARKS) {\n    MARKS[\"BOLD\"] = \"bold\";\n    MARKS[\"ITALIC\"] = \"italic\";\n    MARKS[\"UNDERLINE\"] = \"underline\";\n    MARKS[\"CODE\"] = \"code\";\n    MARKS[\"SUPERSCRIPT\"] = \"superscript\";\n    MARKS[\"SUBSCRIPT\"] = \"subscript\";\n    MARKS[\"STRIKETHROUGH\"] = \"strikethrough\";\n})(exports.MARKS || (exports.MARKS = {}));\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nvar _a$1;\n/**\n * Array of all top level block types.\n * Only these block types can be the direct children of the document.\n */\nvar TOP_LEVEL_BLOCKS = [\n    exports.BLOCKS.PARAGRAPH,\n    exports.BLOCKS.HEADING_1,\n    exports.BLOCKS.HEADING_2,\n    exports.BLOCKS.HEADING_3,\n    exports.BLOCKS.HEADING_4,\n    exports.BLOCKS.HEADING_5,\n    exports.BLOCKS.HEADING_6,\n    exports.BLOCKS.OL_LIST,\n    exports.BLOCKS.UL_LIST,\n    exports.BLOCKS.HR,\n    exports.BLOCKS.QUOTE,\n    exports.BLOCKS.EMBEDDED_ENTRY,\n    exports.BLOCKS.EMBEDDED_ASSET,\n    exports.BLOCKS.EMBEDDED_RESOURCE,\n    exports.BLOCKS.TABLE,\n];\n/**\n * Array of all allowed block types inside list items\n */\nvar LIST_ITEM_BLOCKS = [\n    exports.BLOCKS.PARAGRAPH,\n    exports.BLOCKS.HEADING_1,\n    exports.BLOCKS.HEADING_2,\n    exports.BLOCKS.HEADING_3,\n    exports.BLOCKS.HEADING_4,\n    exports.BLOCKS.HEADING_5,\n    exports.BLOCKS.HEADING_6,\n    exports.BLOCKS.OL_LIST,\n    exports.BLOCKS.UL_LIST,\n    exports.BLOCKS.HR,\n    exports.BLOCKS.QUOTE,\n    exports.BLOCKS.EMBEDDED_ENTRY,\n    exports.BLOCKS.EMBEDDED_ASSET,\n    exports.BLOCKS.EMBEDDED_RESOURCE,\n];\nvar TABLE_BLOCKS = [\n    exports.BLOCKS.TABLE,\n    exports.BLOCKS.TABLE_ROW,\n    exports.BLOCKS.TABLE_CELL,\n    exports.BLOCKS.TABLE_HEADER_CELL,\n];\n/**\n * Array of all void block types\n */\nvar VOID_BLOCKS = [\n    exports.BLOCKS.HR,\n    exports.BLOCKS.EMBEDDED_ENTRY,\n    exports.BLOCKS.EMBEDDED_ASSET,\n    exports.BLOCKS.EMBEDDED_RESOURCE,\n];\n/**\n * Dictionary of all container block types, and the set block types they accept as children.\n *\n * Note: This does not include `[BLOCKS.DOCUMENT]: TOP_LEVEL_BLOCKS`\n */\nvar CONTAINERS = (_a$1 = {},\n    _a$1[exports.BLOCKS.OL_LIST] = [exports.BLOCKS.LIST_ITEM],\n    _a$1[exports.BLOCKS.UL_LIST] = [exports.BLOCKS.LIST_ITEM],\n    _a$1[exports.BLOCKS.LIST_ITEM] = LIST_ITEM_BLOCKS,\n    _a$1[exports.BLOCKS.QUOTE] = [exports.BLOCKS.PARAGRAPH],\n    _a$1[exports.BLOCKS.TABLE] = [exports.BLOCKS.TABLE_ROW],\n    _a$1[exports.BLOCKS.TABLE_ROW] = [exports.BLOCKS.TABLE_CELL, exports.BLOCKS.TABLE_HEADER_CELL],\n    _a$1[exports.BLOCKS.TABLE_CELL] = [exports.BLOCKS.PARAGRAPH, exports.BLOCKS.UL_LIST, exports.BLOCKS.OL_LIST],\n    _a$1[exports.BLOCKS.TABLE_HEADER_CELL] = [exports.BLOCKS.PARAGRAPH],\n    _a$1);\n/**\n * Array of all heading levels\n */\nvar HEADINGS = [\n    exports.BLOCKS.HEADING_1,\n    exports.BLOCKS.HEADING_2,\n    exports.BLOCKS.HEADING_3,\n    exports.BLOCKS.HEADING_4,\n    exports.BLOCKS.HEADING_5,\n    exports.BLOCKS.HEADING_6,\n];\n/**\n * Array of all block types that may contain text and inline nodes.\n */\nvar TEXT_CONTAINERS = __spreadArray([exports.BLOCKS.PARAGRAPH], HEADINGS, true);\n/**\n * Node types before `tables` release.\n */\nvar V1_NODE_TYPES = [\n    exports.BLOCKS.DOCUMENT,\n    exports.BLOCKS.PARAGRAPH,\n    exports.BLOCKS.HEADING_1,\n    exports.BLOCKS.HEADING_2,\n    exports.BLOCKS.HEADING_3,\n    exports.BLOCKS.HEADING_4,\n    exports.BLOCKS.HEADING_5,\n    exports.BLOCKS.HEADING_6,\n    exports.BLOCKS.OL_LIST,\n    exports.BLOCKS.UL_LIST,\n    exports.BLOCKS.LIST_ITEM,\n    exports.BLOCKS.HR,\n    exports.BLOCKS.QUOTE,\n    exports.BLOCKS.EMBEDDED_ENTRY,\n    exports.BLOCKS.EMBEDDED_ASSET,\n    exports.INLINES.HYPERLINK,\n    exports.INLINES.ENTRY_HYPERLINK,\n    exports.INLINES.ASSET_HYPERLINK,\n    exports.INLINES.EMBEDDED_ENTRY,\n    'text',\n];\n/**\n * Marks before `superscript` & `subscript` release.\n */\nvar V1_MARKS = [exports.MARKS.BOLD, exports.MARKS.CODE, exports.MARKS.ITALIC, exports.MARKS.UNDERLINE];\n\n/**\n * A rich text document considered to be empty.\n * Any other document structure than this is not considered empty.\n */\nvar EMPTY_DOCUMENT = {\n    nodeType: exports.BLOCKS.DOCUMENT,\n    data: {},\n    content: [\n        {\n            nodeType: exports.BLOCKS.PARAGRAPH,\n            data: {},\n            content: [\n                {\n                    nodeType: 'text',\n                    value: '',\n                    marks: [],\n                    data: {},\n                },\n            ],\n        },\n    ],\n};\n\n/**\n * Tiny replacement for Object.values(object).includes(key) to\n * avoid including CoreJS polyfills\n */\nfunction hasValue(obj, value) {\n    for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {\n        var key = _a[_i];\n        if (value === obj[key]) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Checks if the node is an instance of Inline.\n */\nfunction isInline(node) {\n    return hasValue(exports.INLINES, node.nodeType);\n}\n/**\n * Checks if the node is an instance of Block.\n */\nfunction isBlock(node) {\n    return hasValue(exports.BLOCKS, node.nodeType);\n}\n/**\n * Checks if the node is an instance of Text.\n */\nfunction isText(node) {\n    return node.nodeType === 'text';\n}\n/**\n * Checks if a paragraph is empty (has only one child and that child is an empty string text node)\n */\nfunction isEmptyParagraph(node) {\n    if (node.nodeType !== exports.BLOCKS.PARAGRAPH) {\n        return false;\n    }\n    if (node.content.length !== 1) {\n        return false;\n    }\n    var textNode = node.content[0];\n    return textNode.nodeType === 'text' && textNode.value === '';\n}\nfunction isValidDocument(document) {\n    return (document != null &&\n        typeof document === 'object' &&\n        'content' in document &&\n        Array.isArray(document.content));\n}\nvar MIN_NODES_FOR_STRIPPING = 2;\n/**\n * Strips empty trailing paragraph from a document if enabled\n * @param document - The rich text document to process\n * @returns A new document with the empty trailing paragraph removed (if conditions are met)\n * @example\n * const processedDoc = stripEmptyTrailingParagraphFromDocument(document);\n */\nfunction stripEmptyTrailingParagraphFromDocument(document) {\n    if (!isValidDocument(document) || document.content.length < MIN_NODES_FOR_STRIPPING) {\n        return document;\n    }\n    var lastNode = document.content[document.content.length - 1];\n    // Check if the last node is an empty paragraph\n    if (isEmptyParagraph(lastNode)) {\n        return __assign(__assign({}, document), { content: document.content.slice(0, -1) });\n    }\n    return document;\n}\n\nvar helpers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  isBlock: isBlock,\n  isEmptyParagraph: isEmptyParagraph,\n  isInline: isInline,\n  isText: isText,\n  stripEmptyTrailingParagraphFromDocument: stripEmptyTrailingParagraphFromDocument\n});\n\nvar typeMismatchError = function (_a) {\n    var path = _a.path, property = _a.property, typeName = _a.typeName, value = _a.value;\n    return {\n        details: \"The type of \\\"\".concat(property, \"\\\" is incorrect, expected type: \").concat(typeName),\n        name: 'type',\n        path: path.toArray(),\n        type: typeName,\n        value: value,\n    };\n};\nvar minSizeError = function (_a) {\n    var min = _a.min, value = _a.value, path = _a.path;\n    return {\n        name: 'size',\n        min: min,\n        path: path.toArray(),\n        details: \"Size must be at least \".concat(min),\n        value: value,\n    };\n};\nvar maxSizeError = function (_a) {\n    var max = _a.max, value = _a.value, path = _a.path;\n    return {\n        name: 'size',\n        max: max,\n        path: path.toArray(),\n        details: \"Size must be at most \".concat(max),\n        value: value,\n    };\n};\nvar enumError = function (_a) {\n    var expected = _a.expected, value = _a.value, path = _a.path;\n    return {\n        details: \"Value must be one of expected values\",\n        name: 'in',\n        expected: __spreadArray([], expected, true).sort(),\n        path: path.toArray(),\n        value: value,\n    };\n};\nvar unknownPropertyError = function (_a) {\n    var property = _a.property, path = _a.path;\n    return {\n        details: \"The property \\\"\".concat(property, \"\\\" is not expected\"),\n        name: 'unexpected',\n        path: path.toArray(),\n    };\n};\nvar requiredPropertyError = function (_a) {\n    var property = _a.property, path = _a.path;\n    return {\n        details: \"The property \\\"\".concat(property, \"\\\" is required here\"),\n        name: 'required',\n        path: path.toArray(),\n    };\n};\n\nvar ObjectAssertion = /** @class */ (function () {\n    function ObjectAssertion(obj, path) {\n        var _this = this;\n        this.obj = obj;\n        this.path = path;\n        this._errors = [];\n        this.catch = function () {\n            var _a;\n            var errors = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                errors[_i] = arguments[_i];\n            }\n            (_a = _this._errors).push.apply(_a, errors);\n        };\n        /**\n         * Asserts the key exists in the object. You probably shouldn't call this\n         * function directly. Instead, use `$.object`, `$.number`, `$.string`, etc.\n         */\n        this.exists = function (key) {\n            if (key in _this.obj) {\n                return true;\n            }\n            _this.catch(requiredPropertyError({\n                property: key,\n                path: _this.path.of(key),\n            }));\n            return false;\n        };\n        /**\n         * Asserts the key exists in the object and its value is a plain object. if\n         * no key is provided, it asserts the object itself.\n         */\n        this.object = function (key) {\n            var _a;\n            var value = key ? _this.obj[key] : _this.obj;\n            if (key) {\n                if (!_this.exists(key)) {\n                    return false;\n                }\n            }\n            if (isPlainObject(value)) {\n                return true;\n            }\n            var path = key ? _this.path.of(key) : _this.path;\n            var property = (_a = key !== null && key !== void 0 ? key : _this.path.last()) !== null && _a !== void 0 ? _a : 'value';\n            _this.catch(typeMismatchError({\n                typeName: 'Object',\n                property: property,\n                path: path,\n                value: value,\n            }));\n            return false;\n        };\n        /**\n         * Asserts the key exists in the object and its value is a string.\n         */\n        this.string = function (key) {\n            var value = _this.obj[key];\n            if (key && !_this.exists(key)) {\n                return false;\n            }\n            if (typeof value === 'string') {\n                return true;\n            }\n            _this.catch(typeMismatchError({\n                typeName: 'String',\n                property: key,\n                path: _this.path.of(key),\n                value: value,\n            }));\n            return false;\n        };\n        /**\n         * Asserts the key exists in the object and its value is a number.\n         */\n        this.number = function (key, optional) {\n            var value = _this.obj[key];\n            if (optional && !(key in _this.obj)) {\n                return true;\n            }\n            if (!_this.exists(key)) {\n                return false;\n            }\n            if (typeof value === 'number' && !Number.isNaN(value)) {\n                return true;\n            }\n            _this.catch(typeMismatchError({\n                typeName: 'Number',\n                property: key,\n                path: _this.path.of(key),\n                value: value,\n            }));\n            return false;\n        };\n        /**\n         * Asserts the key exists in the object and its value is an array. You don't\n         * need to manually call this function before `$.each` or `$.maxLength`.\n         */\n        this.array = function (key) {\n            var value = _this.obj[key];\n            if (key && !_this.exists(key)) {\n                return false;\n            }\n            if (Array.isArray(value)) {\n                return true;\n            }\n            _this.catch(typeMismatchError({\n                typeName: 'Array',\n                property: key,\n                path: _this.path.of(key),\n                value: value,\n            }));\n            return false;\n        };\n        /**\n         * Asserts the value of the key is one of the expected values.\n         */\n        this.enum = function (key, expected) {\n            var value = _this.obj[key];\n            if (typeof value === 'string' && expected.includes(value)) {\n                return true;\n            }\n            _this.catch(enumError({\n                expected: expected,\n                value: value,\n                path: _this.path.of(key),\n            }));\n            return false;\n        };\n        /**\n         * Asserts the array value of the object key is empty. If the value isn't an\n         * array, the function captures a type error and returns false.\n         */\n        this.empty = function (key) {\n            if (!_this.array(key)) {\n                return false;\n            }\n            var value = _this.obj[key];\n            if (value.length === 0) {\n                return true;\n            }\n            _this.catch(maxSizeError({\n                max: 0,\n                value: value,\n                path: _this.path.of(key),\n            }));\n            return false;\n        };\n        /**\n         * Asserts the length of the value of the object key is at least `min`. If the\n         * value isn't an array, the function captures a type error and returns false.\n         */\n        this.minLength = function (key, min) {\n            if (!_this.array(key)) {\n                return false;\n            }\n            var value = _this.obj[key];\n            if (value.length >= min) {\n                return true;\n            }\n            _this.catch(minSizeError({\n                min: min,\n                value: value,\n                path: _this.path.of(key),\n            }));\n            return false;\n        };\n        /**\n         * Asserts the object has no additional properties other than the ones\n         * specified\n         */\n        this.noAdditionalProperties = function (properties) {\n            var unknowns = Object.keys(_this.obj)\n                .sort()\n                .filter(function (key) { return !properties.includes(key); });\n            unknowns.forEach(function (property) {\n                return _this.catch(unknownPropertyError({\n                    property: property,\n                    path: _this.path.of(property),\n                }));\n            });\n            return unknowns.length === 0;\n        };\n        /**\n         * Iterates over the value of the key and assert each item. If the value isn't\n         * an array, the function captures a type error and safely exits.\n         *\n         * To maintain compatibility with previous implementation, we stop early if we\n         * find any errors.\n         */\n        this.each = function (key, assert) {\n            if (!_this.array(key)) {\n                return;\n            }\n            var value = _this.obj[key];\n            var foundErrors = false;\n            value.forEach(function (item, index) {\n                if (foundErrors) {\n                    return;\n                }\n                var errors = assert(item, _this.path.of(key).of(index));\n                if (errors.length > 0) {\n                    foundErrors = true;\n                }\n                _this.catch.apply(_this, errors);\n            });\n        };\n    }\n    Object.defineProperty(ObjectAssertion.prototype, \"errors\", {\n        get: function () {\n            var _this = this;\n            var serializeError = function (error) {\n                return JSON.stringify({\n                    details: error.details,\n                    path: error.path,\n                });\n            };\n            return this._errors.filter(function (error, index) {\n                return _this._errors.findIndex(function (step) { return serializeError(error) === serializeError(step); }) === index;\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return ObjectAssertion;\n}());\n\nvar VOID_CONTENT = [];\nvar NodeAssertion = /** @class */ (function () {\n    function NodeAssertion(contentRule, validateData) {\n        this.contentRule = contentRule;\n        this.validateData = validateData;\n    }\n    NodeAssertion.prototype.assert = function (node, path) {\n        var _a, _b;\n        var $ = new ObjectAssertion(node, path);\n        if (!$.object()) {\n            return $.errors;\n        }\n        $.noAdditionalProperties(['nodeType', 'data', 'content']);\n        var _c = Array.isArray(this.contentRule)\n            ? {\n                nodeTypes: this.contentRule,\n            }\n            : this.contentRule(node, path), nodeTypes = _c.nodeTypes, _d = _c.min, min = _d === void 0 ? 0 : _d;\n        if (nodeTypes.length === 0 && min > 0) {\n            throw new Error(\"Invalid content rule. Cannot have enforce a 'min' of \".concat(min, \" with no nodeTypes\"));\n        }\n        $.minLength('content', min);\n        // Is void\n        if (nodeTypes.length === 0) {\n            $.empty('content');\n        }\n        // Ensure content nodes have valid nodeTypes without validating the full\n        // shape which is something that's only done later if the current node is\n        // valid.\n        else {\n            $.each('content', function (item, path) {\n                var item$ = new ObjectAssertion(item, path);\n                if (!item$.object()) {\n                    return item$.errors;\n                }\n                item$.enum('nodeType', nodeTypes);\n                return item$.errors;\n            });\n        }\n        if ($.object('data')) {\n            var dataErrors = (_b = (_a = this.validateData) === null || _a === void 0 ? void 0 : _a.call(this, node.data, path.of('data'))) !== null && _b !== void 0 ? _b : [];\n            $.catch.apply($, dataErrors);\n        }\n        return $.errors;\n    };\n    return NodeAssertion;\n}());\nvar EntityLinkAssertion = /** @class */ (function (_super) {\n    __extends(EntityLinkAssertion, _super);\n    function EntityLinkAssertion(linkType, contentNodeTypes) {\n        var _this = _super.call(this, contentNodeTypes, function (data, path) { return _this.assertLink(data, path); }) || this;\n        _this.linkType = linkType;\n        _this.assertLink = function (data, path) {\n            var $ = new ObjectAssertion(data, path);\n            if ($.object('target')) {\n                var sys$ = new ObjectAssertion(data.target.sys, path.of('target').of('sys'));\n                if (sys$.object()) {\n                    sys$.enum('type', [_this.type]);\n                    sys$.enum('linkType', [_this.linkType]);\n                    if (_this.type === 'Link') {\n                        sys$.string('id');\n                        sys$.noAdditionalProperties(['type', 'linkType', 'id']);\n                    }\n                    else if (_this.type === 'ResourceLink') {\n                        sys$.string('urn');\n                        sys$.noAdditionalProperties(['type', 'linkType', 'urn']);\n                    }\n                }\n                $.catch.apply($, sys$.errors);\n            }\n            $.noAdditionalProperties(['target']);\n            return $.errors;\n        };\n        _this.type = _this.linkType.startsWith('Contentful:') ? 'ResourceLink' : 'Link';\n        return _this;\n    }\n    return EntityLinkAssertion;\n}(NodeAssertion));\nvar HyperLinkAssertion = /** @class */ (function (_super) {\n    __extends(HyperLinkAssertion, _super);\n    function HyperLinkAssertion() {\n        var _this = _super.call(this, ['text'], function (data, path) { return _this.assertLink(data, path); }) || this;\n        _this.assertLink = function (data, path) {\n            var $ = new ObjectAssertion(data, path);\n            $.string('uri');\n            $.noAdditionalProperties(['uri']);\n            return $.errors;\n        };\n        return _this;\n    }\n    return HyperLinkAssertion;\n}(NodeAssertion));\nvar assert = function (contentRule, validateData) {\n    return new NodeAssertion(contentRule, validateData);\n};\nvar assertLink = function (linkType, contentRule) {\n    return new EntityLinkAssertion(linkType, contentRule);\n};\n\nvar Path = /** @class */ (function () {\n    function Path(path) {\n        if (path === void 0) { path = []; }\n        var _this = this;\n        this.path = path;\n        this.of = function (element) {\n            return new Path(__spreadArray(__spreadArray([], _this.path, true), [element], false));\n        };\n        this.isRoot = function () {\n            return _this.path.length === 0;\n        };\n        this.last = function () {\n            return _this.path[_this.path.length - 1];\n        };\n        this.toArray = function () {\n            return _this.path;\n        };\n    }\n    return Path;\n}());\n\nfunction assertText(text, path) {\n    var $ = new ObjectAssertion(text, path);\n    if (!$.object()) {\n        return $.errors;\n    }\n    $.noAdditionalProperties(['nodeType', 'data', 'value', 'marks']);\n    $.object('data');\n    $.each('marks', function (mark, path) {\n        var mark$ = new ObjectAssertion(mark, path);\n        if (!mark$.object()) {\n            return mark$.errors;\n        }\n        // For historical reasons, we don't explicitly check for supported marks\n        // e.g. bold, italic ..etc. This makes it possible for a customer to add\n        // custom marks\n        mark$.string('type');\n        return mark$.errors;\n    });\n    $.string('value');\n    return $.errors;\n}\n\nvar _a;\nvar assertInlineOrText = assert(__spreadArray(__spreadArray([], Object.values(exports.INLINES), true), ['text'], false).sort());\nvar assertList = assert([exports.BLOCKS.LIST_ITEM]);\nvar assertVoidEntryLink = assertLink('Entry', VOID_CONTENT);\nvar assertTableCell = assert(function () { return ({\n    nodeTypes: [exports.BLOCKS.PARAGRAPH],\n    min: 1,\n}); }, function (data, path) {\n    var $ = new ObjectAssertion(data, path);\n    $.noAdditionalProperties(['colspan', 'rowspan']);\n    $.number('colspan', true);\n    $.number('rowspan', true);\n    return $.errors;\n});\nvar nodeValidator = (_a = {},\n    _a[exports.BLOCKS.DOCUMENT] = assert(TOP_LEVEL_BLOCKS),\n    _a[exports.BLOCKS.PARAGRAPH] = assertInlineOrText,\n    _a[exports.BLOCKS.HEADING_1] = assertInlineOrText,\n    _a[exports.BLOCKS.HEADING_2] = assertInlineOrText,\n    _a[exports.BLOCKS.HEADING_3] = assertInlineOrText,\n    _a[exports.BLOCKS.HEADING_4] = assertInlineOrText,\n    _a[exports.BLOCKS.HEADING_5] = assertInlineOrText,\n    _a[exports.BLOCKS.HEADING_6] = assertInlineOrText,\n    _a[exports.BLOCKS.QUOTE] = assert(CONTAINERS[exports.BLOCKS.QUOTE]),\n    _a[exports.BLOCKS.EMBEDDED_ENTRY] = assertVoidEntryLink,\n    _a[exports.BLOCKS.EMBEDDED_ASSET] = assertLink('Asset', VOID_CONTENT),\n    _a[exports.BLOCKS.EMBEDDED_RESOURCE] = assertLink('Contentful:Entry', VOID_CONTENT),\n    _a[exports.BLOCKS.HR] = assert(VOID_CONTENT),\n    _a[exports.BLOCKS.OL_LIST] = assertList,\n    _a[exports.BLOCKS.UL_LIST] = assertList,\n    _a[exports.BLOCKS.LIST_ITEM] = assert(__spreadArray([], LIST_ITEM_BLOCKS, true).sort()),\n    _a[exports.BLOCKS.TABLE] = assert(function () { return ({\n        nodeTypes: [exports.BLOCKS.TABLE_ROW],\n        min: 1,\n    }); }),\n    _a[exports.BLOCKS.TABLE_ROW] = assert(function () { return ({\n        nodeTypes: [exports.BLOCKS.TABLE_CELL, exports.BLOCKS.TABLE_HEADER_CELL],\n        min: 1,\n    }); }),\n    _a[exports.BLOCKS.TABLE_CELL] = assertTableCell,\n    _a[exports.BLOCKS.TABLE_HEADER_CELL] = assertTableCell,\n    _a[exports.INLINES.HYPERLINK] = new HyperLinkAssertion(),\n    _a[exports.INLINES.EMBEDDED_ENTRY] = assertVoidEntryLink,\n    _a[exports.INLINES.EMBEDDED_RESOURCE] = assertLink('Contentful:Entry', VOID_CONTENT),\n    _a[exports.INLINES.ENTRY_HYPERLINK] = assertLink('Entry', ['text']),\n    _a[exports.INLINES.ASSET_HYPERLINK] = assertLink('Asset', ['text']),\n    _a[exports.INLINES.RESOURCE_HYPERLINK] = assertLink('Contentful:Entry', ['text']),\n    _a);\nfunction validateNode(node, path) {\n    if (node.nodeType === 'text') {\n        return assertText(node, path);\n    }\n    var errors = nodeValidator[node.nodeType].assert(node, path);\n    if (errors.length > 0) {\n        return errors;\n    }\n    var $ = new ObjectAssertion(node, path);\n    $.each('content', function (item, path) {\n        // We already know those are valid nodes thanks to the assertion done in\n        // the NodeAssertion class\n        return validateNode(item, path);\n    });\n    return $.errors;\n}\nvar validateRichTextDocument = function (document) {\n    var path = new Path();\n    var $ = new ObjectAssertion(document, path);\n    if ($.object()) {\n        $.enum('nodeType', [exports.BLOCKS.DOCUMENT]);\n    }\n    if ($.errors.length > 0) {\n        return $.errors;\n    }\n    return validateNode(document, path);\n};\n\nexports.CONTAINERS = CONTAINERS;\nexports.EMPTY_DOCUMENT = EMPTY_DOCUMENT;\nexports.HEADINGS = HEADINGS;\nexports.LIST_ITEM_BLOCKS = LIST_ITEM_BLOCKS;\nexports.TABLE_BLOCKS = TABLE_BLOCKS;\nexports.TEXT_CONTAINERS = TEXT_CONTAINERS;\nexports.TOP_LEVEL_BLOCKS = TOP_LEVEL_BLOCKS;\nexports.V1_MARKS = V1_MARKS;\nexports.V1_NODE_TYPES = V1_NODE_TYPES;\nexports.VOID_BLOCKS = VOID_BLOCKS;\nexports.helpers = helpers;\nexports.validateRichTextDocument = validateRichTextDocument;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@contentful/rich-text-types/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@contentful/rich-text-types/node_modules/is-plain-obj/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@contentful/rich-text-types/node_modules/is-plain-obj/index.js ***!
  \*************************************************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = value => {\n\tif (Object.prototype.toString.call(value) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn prototype === null || prototype === Object.prototype;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNvbnRlbnRmdWwvcmljaC10ZXh0LXR5cGVzL25vZGVfbW9kdWxlcy9pcy1wbGFpbi1vYmovaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdXNlci9EZXNrdG9wL3BvcnRzbW91dGgvbm9kZV9tb2R1bGVzL0Bjb250ZW50ZnVsL3JpY2gtdGV4dC10eXBlcy9ub2RlX21vZHVsZXMvaXMtcGxhaW4tb2JqL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB2YWx1ZSA9PiB7XG5cdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICE9PSAnW29iamVjdCBPYmplY3RdJykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGNvbnN0IHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSk7XG5cdHJldHVybiBwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlO1xufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@contentful/rich-text-types/node_modules/is-plain-obj/index.js\n");

/***/ })

};
;